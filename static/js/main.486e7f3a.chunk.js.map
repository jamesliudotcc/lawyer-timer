{"version":3,"sources":["features/timer/spinner.svg","features/timer/Timer.tsx","App.tsx","app/store.ts","reportWebVitals.ts","index.tsx"],"names":["timeDifference","t","end","start","now","Temporal","instant","epochSeconds","Timer","uuid","useState","started","toggleStarted","timestamps","setTimestamps","hours","reduce","a","s","sum","map","whole_hours","toFixed","useEffect","interval","setInterval","pop","clearInterval","type","placeholder","className","onClick","src","spinner","alt","remainder","Math","floor","round","tenths","name","id","cols","rows","App","uuidv4","cards","setCards","card","configureStore","reducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"uPAAe,MAA0B,oCCQzC,SAASA,EAAeC,GACtB,OAAOA,EAAEC,IAAMD,EAAEE,MAEnB,SAASC,IACP,OAAOC,WAASD,IAAIE,UAAUC,aA8EjBC,MAxEf,YAA2C,EAA1BC,KAA2B,IAAD,EACRC,oBAAS,GADD,mBAClCC,EADkC,KACzBC,EADyB,OAELF,mBAAsB,IAFjB,mBAElCG,EAFkC,KAEtBC,EAFsB,KAQnCC,EArBR,SAAaF,GACX,OAAOA,EAAWG,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAiBjCC,CAAIN,EAAWO,IAAIpB,IAGP,KAEfqB,EAAcN,EAAMO,QAAQ,GA0ClC,OA5BAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3B,GAAId,EAAS,CACX,IAAMR,EAAQU,EAAWa,MACzB,IAAKvB,EAAO,OACZW,EAAc,GAAD,mBAAKD,GAAL,CAAiB,CAAEV,MAAOA,EAAMA,MAAOD,IAAKE,WAE1D,KACH,OAAO,kBAAMuB,cAAcH,OAqB3B,oCACE,uBAAOI,KAAK,OAAOC,YAAY,WAC/B,uBAAOD,KAAK,OAAOC,YAAY,WAC/B,sBAAKC,UAAU,WAAf,UACE,wBAAQC,QAtBd,WACE,GAAIpB,EAAS,CACX,IAAMR,EAAQU,EAAWa,MACzB,IAAKvB,EAAO,OACZW,EAAc,GAAD,mBAAKD,GAAL,CAAiB,CAAEV,MAAOA,EAAMA,MAAOD,IAAKE,aAEzDU,EAAc,GAAD,mBACRD,GADQ,CAEX,CACEV,MAAOC,IACPF,IAAKE,QAIXQ,GAAeD,IAQX,SAA+BA,EAAU,OAAS,UAClD,qBAAKqB,IAAKC,EAASC,IAAI,UAAUJ,UAAWnB,EAAU,GAAK,YAE7D,8BAxCY,IAAVI,EAAoB,IAClB,GAAN,OAAUM,EAAV,YATF,WACE,IAAMc,EAAYpB,EAAQqB,KAAKC,MAAMtB,GAErC,OAAIA,EAAQ,GAAKoB,EAAY,GAAY,IAClCC,KAAKE,MAAkB,GAAZH,GAAgBb,QAAQ,GAKjBiB,IAuCvB,YACA,0BACEC,KAAK,cACLC,GAAG,cACHZ,YAAY,cACZa,KAAM,GACNC,KAAM,SCtDCC,MAxBf,WAAgB,IAAD,EACalC,mBAAS,CAACmC,gBADvB,mBACNC,EADM,KACCC,EADD,KAOb,OACE,sBAAKjB,UAAU,MAAf,UACE,iCACE,gDAEF,iCACGgB,EAAM1B,KAAI,SAAC4B,GAAD,OACT,cAAC,EAAD,CAAOvC,KAAMuC,GAAWA,MAE1B,kCACE,wBAAQjB,QAdhB,WACE,OAAOgB,EAAS,GAAD,mBAAKD,GAAL,CAAYD,kBAarB,0B,QCrBKI,cAAe,CAC5BC,QAAS,K,QCWIC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.486e7f3a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spinner.dbc02f24.svg\";","import React, { useEffect, useState } from \"react\";\nimport { Temporal } from \"proposal-temporal\";\nimport { StartStop } from \"./types\";\nimport spinner from \"./spinner.svg\";\n\nfunction sum(timestamps: number[]) {\n  return timestamps.reduce((a, s) => a + s, 0);\n}\nfunction timeDifference(t: StartStop) {\n  return t.end - t.start;\n}\nfunction now() {\n  return Temporal.now.instant().epochSeconds;\n}\n\nconst SECONDS_IN_MINS = 60;\nconst MINS_IN_HOURS = 60;\n\nfunction Timer({ uuid }: { uuid: string }) {\n  const [started, toggleStarted] = useState(false);\n  const [timestamps, setTimestamps] = useState<StartStop[]>([]);\n\n  function seconds() {\n    return sum(timestamps.map(timeDifference));\n  }\n\n  const hours = seconds() / (SECONDS_IN_MINS * MINS_IN_HOURS);\n\n  const whole_hours = hours.toFixed(0);\n\n  function tenths() {\n    const remainder = hours - Math.floor(hours);\n\n    if (hours < 1 && remainder < 0.1) return \"1\";\n    return Math.round(remainder * 10).toFixed(0);\n  }\n\n  function computedHours() {\n    if (hours === 0) return \"0\";\n    return `${whole_hours}.${tenths()}`;\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (started) {\n        const start = timestamps.pop();\n        if (!start) return;\n        setTimestamps([...timestamps, { start: start.start, end: now() }]);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  });\n\n  function toggleTimer() {\n    if (started) {\n      const start = timestamps.pop();\n      if (!start) return;\n      setTimestamps([...timestamps, { start: start.start, end: now() }]);\n    } else {\n      setTimestamps([\n        ...timestamps,\n        {\n          start: now(),\n          end: now(),\n        },\n      ]);\n    }\n    toggleStarted(!started);\n  }\n\n  return (\n    <article>\n      <input type=\"text\" placeholder=\"Client\" />\n      <input type=\"text\" placeholder=\"Matter\" />\n      <div className=\"startRow\">\n        <button onClick={toggleTimer}>{started ? \"Stop\" : \"Start\"}</button>\n        <img src={spinner} alt=\"Running\" className={started ? \"\" : \"hide\"} />\n      </div>\n      <p>{computedHours()} hours</p>\n      <textarea\n        name=\"Description\"\n        id=\"description\"\n        placeholder=\"Description\"\n        cols={30}\n        rows={10}\n      ></textarea>\n    </article>\n  );\n}\n\nexport default Timer;\n","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport \"./App.css\";\nimport Timer from \"./features/timer/Timer\";\n\nfunction App() {\n  const [cards, setCards] = useState([uuidv4()]);\n\n  function addCard() {\n    return setCards([...cards, uuidv4()]);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Lawyer Timer</h1>\n      </header>\n      <main>\n        {cards.map((card) => (\n          <Timer uuid={card} key={card}></Timer>\n        ))}\n        <article>\n          <button onClick={addCard}>Add</button>\n        </article>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nexport default configureStore({\n  reducer: {},\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}